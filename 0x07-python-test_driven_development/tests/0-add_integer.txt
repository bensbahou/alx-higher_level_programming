``0-add_integer`` module
=========================

Using ``add_integer`` function
------------------------------

To use the `add_integer` function in your code, we need to import it:
	>>> add_integer = __import__("0-add_integer").add_integer

Then we can check the module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

And the function docstring:
	>>> f = __import__("0-add_integer").add_integer.__doc__
	>>> len(f) > 1
	True

Check regular addition:
	>>> add_integer(1, 3)
	4

Check positive with negative:
	>>> add_integer(1, -3)
	-2

Check negative with positive:
	 >>> add_integer(-6, 8)
	 2

Check float with int:
	 >>> add_integer(0.1, 6)
	 6

Check int with float:
	 >>> add_integer(5, 7.8)
	 12

Check both float:
	 >>> add_integer(3.45, 2.1)
	 5

Check for passed NaN:
	 >>> add_integer(5, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Check super long int:
	 >>> add_integer(999999999999999999999999999999, 1)
	 1000000000000000000000000000000

Check for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer



Check non-number with number:
	 >>> add_integer([1], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Check number with non-number:
	 >>> add_integer(3, "2")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Check non-number with non-number:
	 >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Check bool with number:
	 >>> add_integer(True, 11)
	 Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Check number with bool:
	 >>> add_integer(10, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

Check no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'


Check more than 2 args:
	 >>> add_integer(1, 0, 5)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given

Check one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'


Check addition over multiple values:
	 >>> [add_integer(i, i ** 2) for i in range(6)]
	 [0, 2, 6, 12, 20, 30]
